<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MySQL 101 - Beginner&#39;s Guide to Learning MySQL</title>
  
  <subtitle>The ultimate guide to mastering MySQL, from basics to advanced techniques.</subtitle>
  <link href="https://mysql101.com/atom.xml" rel="self"/>
  
  <link href="https://mysql101.com/"/>
  <updated>2025-01-17T07:43:18.301Z</updated>
  <id>https://mysql101.com/</id>
  
  <author>
    <name>onlytiancai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Designing a Message Queue Using MySQL</title>
    <link href="https://mysql101.com/mysql-tutorial/2025/01/09/Designing-a-Message-Queue-Using-MySQL/"/>
    <id>https://mysql101.com/mysql-tutorial/2025/01/09/Designing-a-Message-Queue-Using-MySQL/</id>
    <published>2025-01-09T07:56:52.000Z</published>
    <updated>2025-01-17T07:43:18.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Designing-a-Message-Queue-Using-MySQL"><a class="header-anchor" href="#Designing-a-Message-Queue-Using-MySQL">¶</a>Designing a Message Queue Using MySQL</h3><p>Message queues are a critical component of many distributed systems, enabling asynchronous communication between different services. While dedicated tools like RabbitMQ or Kafka are often used for this purpose, you can design a lightweight message queue using MySQL for simpler use cases. This blog will demonstrate how to design such a system, ensuring that both producers and consumers can work concurrently without losing or duplicating tasks.</p><span id="more"></span><hr><h4 id="1-Key-Features-of-the-MySQL-Message-Queue"><a class="header-anchor" href="#1-Key-Features-of-the-MySQL-Message-Queue">¶</a>1. Key Features of the MySQL Message Queue</h4><ul><li><strong>Concurrency</strong>: Support multiple producers and consumers.</li><li><strong>Durability</strong>: Ensure no tasks are lost.</li><li><strong>Idempotency</strong>: Avoid duplicate processing of tasks.</li></ul><hr><h4 id="2-Table-Design"><a class="header-anchor" href="#2-Table-Design">¶</a>2. Table Design</h4><p>We need a single table to represent the message queue. Let’s call it <code>message_queue</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> message_queue (</span><br><span class="line">    message_id <span class="type">BIGINT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- Unique ID for each message</span></span><br><span class="line">    payload TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,                        <span class="comment">-- The actual message content</span></span><br><span class="line">    status ENUM(<span class="string">&#x27;PENDING&#x27;</span>, <span class="string">&#x27;PROCESSING&#x27;</span>, <span class="string">&#x27;DONE&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;PENDING&#x27;</span>, <span class="comment">-- Task state</span></span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- Message creation timestamp</span></span><br><span class="line">    updated_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="comment">-- Last update timestamp</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h4 id="3-Key-Operations"><a class="header-anchor" href="#3-Key-Operations">¶</a>3. Key Operations</h4><h5 id="a-Adding-a-Task-Producer"><a class="header-anchor" href="#a-Adding-a-Task-Producer">¶</a><strong>a. Adding a Task (Producer)</strong></h5><p>Producers add tasks to the queue by inserting records into the <code>message_queue</code> table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> message_queue (payload)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;&#123;&quot;task&quot;: &quot;process_file&quot;, &quot;file_id&quot;: 123&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="b-Fetching-a-Task-Consumer"><a class="header-anchor" href="#b-Fetching-a-Task-Consumer">¶</a><strong>b. Fetching a Task (Consumer)</strong></h5><p>Consumers fetch tasks in the <code>PENDING</code> state and mark them as <code>PROCESSING</code> to prevent other consumers from picking the same task.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>; <span class="comment">-- begin a transaction</span></span><br><span class="line"><span class="keyword">select</span> message_id <span class="keyword">into</span> <span class="variable">@message_id</span> <span class="keyword">from</span> message_queue <span class="keyword">where</span> status <span class="operator">=</span> <span class="string">&#x27;PENDING&#x27;</span> limit <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">skip</span> locked; <span class="comment">-- pick a pending task id.</span></span><br><span class="line"><span class="keyword">update</span> message_queue <span class="keyword">set</span> status<span class="operator">=</span><span class="string">&#x27;PROCESSING&#x27;</span> <span class="keyword">where</span> message_id<span class="operator">=</span><span class="variable">@message_id</span> limit <span class="number">1</span>; <span class="comment">-- update it to processing</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>Explanation:</strong></p><ul><li><code>FOR UPDATE SKIP LOCKED</code>: Prevents other transactions from locking the same rows, enabling concurrent consumers.</li><li><code>RETURNING *</code>: Returns the selected row for the consumer to process.</li></ul><h5 id="c-Completing-a-Task-Consumer"><a class="header-anchor" href="#c-Completing-a-Task-Consumer">¶</a><strong>c. Completing a Task (Consumer)</strong></h5><p>Once a task is successfully processed, the consumer updates its status to <code>DONE</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> message_queue</span><br><span class="line"><span class="keyword">SET</span> status <span class="operator">=</span> <span class="string">&#x27;DONE&#x27;</span>, updated_at <span class="operator">=</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">WHERE</span> message_id <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><h5 id="d-Retrying-Failed-Tasks"><a class="header-anchor" href="#d-Retrying-Failed-Tasks">¶</a><strong>d. Retrying Failed Tasks</strong></h5><p>If a task fails or times out, its status can be reset to <code>PENDING</code> for retrying.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> message_queue</span><br><span class="line"><span class="keyword">SET</span> status <span class="operator">=</span> <span class="string">&#x27;PENDING&#x27;</span>, updated_at <span class="operator">=</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;PROCESSING&#x27;</span> <span class="keyword">AND</span> updated_at <span class="operator">&lt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">HOUR</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="4-Ensuring-Reliability"><a class="header-anchor" href="#4-Ensuring-Reliability">¶</a>4. Ensuring Reliability</h4><ul><li><strong>Transactions</strong>: Wrap producer and consumer operations in transactions to ensure atomicity.</li><li><strong>Indexes</strong>: Add an index on <code>status</code> to optimize queries for <code>PENDING</code> tasks.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_status <span class="keyword">ON</span> message_queue (status);</span><br></pre></td></tr></table></figure><ul><li><strong>Dead Letter Queue (Optional)</strong>: Add a mechanism to move permanently failing tasks to a separate table.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dead_letter_queue (</span><br><span class="line">    message_id <span class="type">BIGINT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    payload TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    failure_reason TEXT,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dead_letter_queue (message_id, payload, failure_reason)</span><br><span class="line"><span class="keyword">SELECT</span> message_id, payload, <span class="string">&#x27;Maximum retries exceeded&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> message_queue</span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;PROCESSING&#x27;</span> <span class="keyword">AND</span> updated_at <span class="operator">&lt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> message_queue <span class="keyword">WHERE</span> message_id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> message_id <span class="keyword">FROM</span> dead_letter_queue</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h4 id="5-Example-Workflow"><a class="header-anchor" href="#5-Example-Workflow">¶</a>5. Example Workflow</h4><ol><li><p><strong>Producer adds tasks</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> message_queue (payload)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;&#123;&quot;task&quot;: &quot;send_email&quot;, &quot;email_id&quot;: 456&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>Consumer fetches tasks</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> message_id <span class="keyword">into</span> <span class="variable">@message_id</span> <span class="keyword">from</span> message_queue <span class="keyword">where</span> status <span class="operator">=</span> <span class="string">&#x27;PENDING&#x27;</span> limit <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">skip</span> locked;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@message_id</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@message_id</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> message_queue <span class="keyword">set</span> status<span class="operator">=</span><span class="string">&#x27;PROCESSING&#x27;</span> <span class="keyword">where</span> message_id<span class="operator">=</span><span class="variable">@message_id</span> limit <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>Consumer completes tasks</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> message_queue</span><br><span class="line"><span class="keyword">SET</span> status <span class="operator">=</span> <span class="string">&#x27;DONE&#x27;</span>, updated_at <span class="operator">=</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">WHERE</span> message_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>Failed tasks are retried</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> message_queue</span><br><span class="line"><span class="keyword">SET</span> status <span class="operator">=</span> <span class="string">&#x27;PENDING&#x27;</span>, updated_at <span class="operator">=</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;PROCESSING&#x27;</span> <span class="keyword">AND</span> updated_at <span class="operator">&lt;</span> NOW() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">HOUR</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="6-Advantages-and-Limitations"><a class="header-anchor" href="#6-Advantages-and-Limitations">¶</a>6. Advantages and Limitations</h4><p><strong>Advantages:</strong></p><ul><li>Simple to implement using standard SQL.</li><li>No additional infrastructure required.</li><li>Supports concurrent producers and consumers.</li></ul><p><strong>Limitations:</strong></p><ul><li>Scalability is limited by MySQL’s performance under high load.</li><li>Requires careful handling of retries and dead letter queues.</li></ul><hr><p>By leveraging MySQL’s transactional guarantees and features like <code>FOR UPDATE SKIP LOCKED</code>, you can build a lightweight and reliable message queue suitable for many small to medium-scale applications. For more complex use cases, consider dedicated messaging systems like RabbitMQ or Kafka.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Designing-a-Message-Queue-Using-MySQL&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Designing-a-Message-Queue-Using-MySQL&quot;&gt;¶&lt;/a&gt;Designing a Message Queue Using MySQL&lt;/h3&gt;
&lt;p&gt;Message queues are a critical component of many distributed systems, enabling asynchronous communication between different services. While dedicated tools like RabbitMQ or Kafka are often used for this purpose, you can design a lightweight message queue using MySQL for simpler use cases. This blog will demonstrate how to design such a system, ensuring that both producers and consumers can work concurrently without losing or duplicating tasks.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Designing a Set of Tables for User Login in</title>
    <link href="https://mysql101.com/mysql-tutorial/2025/01/09/Designing-a-Set-of-Tables-for-User-Login-in/"/>
    <id>https://mysql101.com/mysql-tutorial/2025/01/09/Designing-a-Set-of-Tables-for-User-Login-in/</id>
    <published>2025-01-09T07:37:36.000Z</published>
    <updated>2025-01-17T05:44:27.112Z</updated>
    
    <content type="html"><![CDATA[<p>Designing a robust and scalable user login system is a critical component of many applications. In this blog, we’ll explore how to design a set of MySQL tables for managing user login functionality and important SQL queries to interact with these tables effectively.</p><span id="more"></span><hr><h4 id="1-Key-Components-of-the-Database-Design"><a class="header-anchor" href="#1-Key-Components-of-the-Database-Design">¶</a>1. Key Components of the Database Design</h4><p>The design will include the following tables:</p><ol><li><strong>Users Table</strong>: Stores user information.</li><li><strong>Login Logs Table</strong>: Tracks login attempts and details.</li><li><strong>Roles and Permissions Tables</strong> (Optional): Implements role-based access control (RBAC).</li></ol><p>Let’s break these down one by one.</p><hr><h3 id="Users-Table"><a class="header-anchor" href="#Users-Table">¶</a>Users Table</h3><p>The <code>users</code> table stores basic user details such as usernames, hashed passwords, and contact information.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    user_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- Unique user ID</span></span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,   <span class="comment">-- Username</span></span><br><span class="line">    password_hash <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    <span class="comment">-- Encrypted password</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,              <span class="comment">-- Email address</span></span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">15</span>),                      <span class="comment">-- Phone number (optional)</span></span><br><span class="line">    is_active <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span>,         <span class="comment">-- Account activation status</span></span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- Account creation time</span></span><br><span class="line">    updated_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="comment">-- Last updated time</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="Login-Logs-Table"><a class="header-anchor" href="#Login-Logs-Table">¶</a>Login Logs Table</h3><p>The <code>login_logs</code> table records each login attempt, capturing details like IP address, device, and whether the login was successful.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> login_logs (</span><br><span class="line">    log_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,  <span class="comment">-- Unique log ID</span></span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,                   <span class="comment">-- User ID (foreign key)</span></span><br><span class="line">    login_time <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- Time of login</span></span><br><span class="line">    ip_address <span class="type">VARCHAR</span>(<span class="number">45</span>),                 <span class="comment">-- IP address (supports IPv4 and IPv6)</span></span><br><span class="line">    device_info <span class="type">VARCHAR</span>(<span class="number">255</span>),               <span class="comment">-- Information about the device used</span></span><br><span class="line">    success <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">TRUE</span>,           <span class="comment">-- Whether the login was successful</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (user_id) <span class="keyword">REFERENCES</span> users(user_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h3 id="Roles-and-Permissions-Tables-Optional"><a class="header-anchor" href="#Roles-and-Permissions-Tables-Optional">¶</a>Roles and Permissions Tables (Optional)</h3><p>If your application requires role-based access control, include the following tables:</p><h4 id="Roles-Table"><a class="header-anchor" href="#Roles-Table">¶</a>Roles Table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> roles (</span><br><span class="line">    role_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- Unique role ID</span></span><br><span class="line">    role_name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  <span class="comment">-- Role name (e.g., Admin, User)</span></span><br><span class="line">    description <span class="type">VARCHAR</span>(<span class="number">255</span>)                <span class="comment">-- Description of the role</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="User-Roles-Table-Mapping-Users-to-Roles"><a class="header-anchor" href="#User-Roles-Table-Mapping-Users-to-Roles">¶</a>User Roles Table (Mapping Users to Roles)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_roles (</span><br><span class="line">    user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,       <span class="comment">-- User ID</span></span><br><span class="line">    role_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,       <span class="comment">-- Role ID</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (user_id, role_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (user_id) <span class="keyword">REFERENCES</span> users(user_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (role_id) <span class="keyword">REFERENCES</span> roles(role_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Permissions-Table"><a class="header-anchor" href="#Permissions-Table">¶</a>Permissions Table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> permissions (</span><br><span class="line">    permission_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- Unique permission ID</span></span><br><span class="line">    permission_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- Permission name</span></span><br><span class="line">    description <span class="type">VARCHAR</span>(<span class="number">255</span>)                      <span class="comment">-- Description of the permission</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Role-Permissions-Table-Mapping-Roles-to-Permissions"><a class="header-anchor" href="#Role-Permissions-Table-Mapping-Roles-to-Permissions">¶</a>Role Permissions Table (Mapping Roles to Permissions)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> role_permissions (</span><br><span class="line">    role_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,          <span class="comment">-- Role ID</span></span><br><span class="line">    permission_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,    <span class="comment">-- Permission ID</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (role_id, permission_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (role_id) <span class="keyword">REFERENCES</span> roles(role_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (permission_id) <span class="keyword">REFERENCES</span> permissions(permission_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h4 id="2-Important-SQL-Queries"><a class="header-anchor" href="#2-Important-SQL-Queries">¶</a>2. Important SQL Queries</h4><h5 id="1-Insert-a-New-User"><a class="header-anchor" href="#1-Insert-a-New-User">¶</a>1. Insert a New User</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password_hash, email, phone)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;hashed_password_here&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>, <span class="string">&#x27;1234567890&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-Record-a-Login-Attempt"><a class="header-anchor" href="#2-Record-a-Login-Attempt">¶</a>2. Record a Login Attempt</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> login_logs (user_id, ip_address, device_info, success)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;192.168.1.1&#x27;</span>, <span class="string">&#x27;Chrome on Windows 10&#x27;</span>, <span class="literal">TRUE</span>);</span><br></pre></td></tr></table></figure><h5 id="3-Fetch-Login-History-for-a-User"><a class="header-anchor" href="#3-Fetch-Login-History-for-a-User">¶</a>3. Fetch Login History for a User</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> login_time, ip_address, device_info, success</span><br><span class="line"><span class="keyword">FROM</span> login_logs</span><br><span class="line"><span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> login_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h5 id="4-Assign-a-Role-to-a-User"><a class="header-anchor" href="#4-Assign-a-Role-to-a-User">¶</a>4. Assign a Role to a User</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_roles (user_id, role_id)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>); <span class="comment">-- Assign role_id 2 to user_id 1</span></span><br></pre></td></tr></table></figure><h5 id="5-Check-User-Permissions"><a class="header-anchor" href="#5-Check-User-Permissions">¶</a>5. Check User Permissions</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.permission_name</span><br><span class="line"><span class="keyword">FROM</span> permissions p</span><br><span class="line"><span class="keyword">JOIN</span> role_permissions rp <span class="keyword">ON</span> p.permission_id <span class="operator">=</span> rp.permission_id</span><br><span class="line"><span class="keyword">JOIN</span> user_roles ur <span class="keyword">ON</span> rp.role_id <span class="operator">=</span> ur.role_id</span><br><span class="line"><span class="keyword">WHERE</span> ur.user_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="3-Best-Practices"><a class="header-anchor" href="#3-Best-Practices">¶</a>3. Best Practices</h4><ul><li><strong>Password Security</strong>: Always store passwords as hashed values using strong algorithms like bcrypt.</li><li><strong>Indexes</strong>: Add indexes on frequently queried fields like <code>username</code> and <code>user_id</code>.</li><li><strong>Foreign Key Constraints</strong>: Use foreign key constraints to ensure data integrity between related tables.</li><li><strong>Logging</strong>: Regularly monitor and archive login logs to maintain database performance.</li><li><strong>Scalability</strong>: Consider sharding or partitioning large tables (e.g., <code>login_logs</code>) for better performance in high-traffic systems.</li></ul><hr><p>By following this design and using the provided queries, you can implement a secure and efficient user login system that scales with your application’s needs. Happy coding!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Designing a robust and scalable user login system is a critical component of many applications. In this blog, we’ll explore how to design a set of MySQL tables for managing user login functionality and important SQL queries to interact with these tables effectively.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>001 MySQL Hello World</title>
    <link href="https://mysql101.com/mysql-tutorial/2024/12/17/hello-world/"/>
    <id>https://mysql101.com/mysql-tutorial/2024/12/17/hello-world/</id>
    <published>2024-12-16T16:00:00.000Z</published>
    <updated>2024-12-18T10:02:32.541Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL is a powerful relational database management system that uses SQL (Structured Query Language) to manage and query data. This guide focuses on the fundamental MySQL syntax, including how to create databases, design tables, and perform basic operations like inserting, querying, updating, and deleting data.</p><span id="more"></span><hr><h2 id="1-Creating-a-Database"><a class="header-anchor" href="#1-Creating-a-Database">¶</a>1. <strong>Creating a Database</strong></h2><p>To create a new database in MySQL, use the following command:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE my_database;</span><br></pre></td></tr></table></figure><p>To select and start using the database:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE my_database;</span><br></pre></td></tr></table></figure><hr><h2 id="2-Creating-Tables"><a class="header-anchor" href="#2-Creating-Tables">¶</a>2. <strong>Creating Tables</strong></h2><p>Tables are the core structures in a relational database. Here’s how to create a basic table:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Explanation"><a class="header-anchor" href="#Explanation">¶</a>Explanation:</h3><ul><li><code>id</code>: A unique identifier with auto-increment.</li><li><code>name</code>: Stores the user’s name, up to 100 characters.</li><li><code>email</code>: Ensures emails are unique for each user.</li><li><code>created_at</code>: Automatically stores the record’s creation time.</li></ul><hr><h2 id="3-Inserting-Data"><a class="header-anchor" href="#3-Inserting-Data">¶</a>3. <strong>Inserting Data</strong></h2><p>Add records to a table using the <code>INSERT INTO</code> command:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span> (<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;alice@example.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email) <span class="keyword">VALUES</span> (<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;bob@example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="4-Querying-Data"><a class="header-anchor" href="#4-Querying-Data">¶</a>4. <strong>Querying Data</strong></h2><p>Retrieve data from a table using the <code>SELECT</code> statement:</p><h3 id="Select-All-Records"><a class="header-anchor" href="#Select-All-Records">¶</a>Select All Records:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><h3 id="Select-Specific-Columns"><a class="header-anchor" href="#Select-Specific-Columns">¶</a>Select Specific Columns:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, email <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><h3 id="Adding-Conditions-with-WHERE"><a class="header-anchor" href="#Adding-Conditions-with-WHERE">¶</a>Adding Conditions with <code>WHERE</code>:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="5-Updating-Data"><a class="header-anchor" href="#5-Updating-Data">¶</a>5. <strong>Updating Data</strong></h2><p>Modify existing records in a table with the <code>UPDATE</code> command:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;alice.new@example.com&#x27;</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="6-Deleting-Data"><a class="header-anchor" href="#6-Deleting-Data">¶</a>6. <strong>Deleting Data</strong></h2><p>Remove records from a table using the <code>DELETE</code> statement:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="7-Additional-SQL-Concepts"><a class="header-anchor" href="#7-Additional-SQL-Concepts">¶</a>7. <strong>Additional SQL Concepts</strong></h2><h3 id="Sorting-Results-ORDER-BY"><a class="header-anchor" href="#Sorting-Results-ORDER-BY">¶</a>Sorting Results (<code>ORDER BY</code>):</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="Filtering-Results-LIMIT"><a class="header-anchor" href="#Filtering-Results-LIMIT">¶</a>Filtering Results (<code>LIMIT</code>):</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="Counting-Records"><a class="header-anchor" href="#Counting-Records">¶</a>Counting Records:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> user_count <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure><hr><h2 id="8-Combining-Data-with-Joins"><a class="header-anchor" href="#8-Combining-Data-with-Joins">¶</a>8. <strong>Combining Data with Joins</strong></h2><p>To retrieve data from multiple tables, use <code>JOIN</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> users.name, orders.order_date</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">JOIN</span> orders <span class="keyword">ON</span> users.id <span class="operator">=</span> orders.user_id;</span><br></pre></td></tr></table></figure><hr><h2 id="9-Dropping-Databases-or-Tables"><a class="header-anchor" href="#9-Dropping-Databases-or-Tables">¶</a>9. <strong>Dropping Databases or Tables</strong></h2><h3 id="Deleting-a-Table"><a class="header-anchor" href="#Deleting-a-Table">¶</a>Deleting a Table:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> users;</span><br></pre></td></tr></table></figure><h3 id="Deleting-a-Database"><a class="header-anchor" href="#Deleting-a-Database">¶</a>Deleting a Database:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE my_database;</span><br></pre></td></tr></table></figure><hr><h2 id="Conclusion"><a class="header-anchor" href="#Conclusion">¶</a>Conclusion</h2><p>This guide covers the essential MySQL commands needed to start working with databases. By practicing these operations, you’ll develop a strong foundation in SQL and MySQL. Continue exploring advanced features like indexing, stored procedures, and query optimization to further enhance your database skills.</p>]]></content>
    
    
    <summary type="html">Learn the essential MySQL syntax, including creating databases, tables, and performing basic CRUD operations. Perfect for beginners!</summary>
    
    
    
    <category term="Database Tutorials" scheme="https://mysql101.com/categories/Database-Tutorials/"/>
    
    
    <category term="MySQL" scheme="https://mysql101.com/tags/MySQL/"/>
    
    <category term="SQL" scheme="https://mysql101.com/tags/SQL/"/>
    
    <category term="Database" scheme="https://mysql101.com/tags/Database/"/>
    
  </entry>
  
</feed>
